name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          gcc-mingw-w64-x86-64 \
          gcc-mingw-w64-i686 \
          gcc-mingw-w64

    - name: Build Linux binaries
      run: |
        # Linux AMD64
        make build-linux-amd64 || echo "Failed to build linux-amd64"
        
        # Linux ARM64
        make build-linux-arm64 || echo "Failed to build linux-arm64"
        
        # Windows binaries (cross-compiled from Linux)
        make build-windows-amd64 || echo "Failed to build windows-amd64"
        make build-windows-i386 || echo "Failed to build windows-i386"
        make build-windows-arm64 || echo "Failed to build windows-arm64"

    - name: Create checksums for Linux builds
      run: |
        if [ -d build ]; then
          cd build
          for binary in cj-linux-* cj-windows-*; do
            if [ -f "$binary" ]; then
              sha256sum "$binary" > "$binary.sha256"
            fi
          done
          cd ..
        fi

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-linux
        path: |
          build/cj-linux-*
          build/cj-windows-*
          build/*.sha256

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Build macOS binaries
      run: |
        # macOS Intel
        make build-darwin-amd64 || echo "Failed to build darwin-amd64"
        
        # macOS Apple Silicon
        make build-darwin-arm64 || echo "Failed to build darwin-arm64"

    - name: Create checksums for macOS builds
      run: |
        if [ -d build ]; then
          cd build
          for binary in cj-darwin-*; do
            if [ -f "$binary" ]; then
              shasum -a 256 "$binary" > "$binary.sha256"
            fi
          done
          cd ..
        fi

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-macos
        path: |
          build/cj-darwin-*
          build/*.sha256

  build-windows-native:
    name: Build Windows Binaries (Native)
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          make

    - name: Build Windows binaries (native)
      shell: msys2 {0}
      run: |
        # Build native Windows binary
        make clean
        make
        mkdir -p build
        cp cj.exe build/cj-windows-native.exe || cp cj build/cj-windows-native

    - name: Create checksums for Windows builds
      shell: msys2 {0}
      run: |
        if [ -d build ]; then
          cd build
          for binary in cj-windows-native*; do
            if [ -f "$binary" ]; then
              sha256sum "$binary" > "$binary.sha256"
            fi
          done
          cd ..
        fi

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-windows-native
        path: |
          build/cj-windows-native*
          build/*.sha256

  create-release:
    name: Create Release
    needs: [build-linux, build-macos, build-windows-native]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create source archive
      run: |
        # Create source archive excluding build artifacts and git
        mkdir -p release-assets
        git archive --format=tar.gz --prefix=cj-${{ steps.version.outputs.VERSION }}/ HEAD > release-assets/cj-${{ steps.version.outputs.VERSION }}-source.tar.gz
        
        # Create zip version for Windows users
        git archive --format=zip --prefix=cj-${{ steps.version.outputs.VERSION }}/ HEAD > release-assets/cj-${{ steps.version.outputs.VERSION }}-source.zip
    
    - name: Prepare binary release assets
      run: |
        # Copy all binaries and checksums to release-assets
        find artifacts -name "cj-*" -type f | while read file; do
          cp "$file" release-assets/
        done
        
        # Copy all checksum files
        find artifacts -name "*.sha256" -type f | while read file; do
          cp "$file" release-assets/
        done
        
        # Create a comprehensive checksum file
        cd release-assets
        find . -name "cj-*" -type f ! -name "*.sha256" -exec sha256sum {} \; | sed 's|./||' > SHA256SUMS
        cd ..
        
        # List all assets
        echo "Release assets:"
        ls -la release-assets/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog for this release
        if [ -n "$PREV_TAG" ]; then
          echo "PREVIOUS_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "### What's Changed" > changelog_content.md
          echo "" >> changelog_content.md
          
          # Get commit messages between tags
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -v "Merge pull request" | grep -v "^- chore:" >> changelog_content.md || true
          
          echo "" >> changelog_content.md
          echo "" >> changelog_content.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ steps.version.outputs.VERSION }}" >> changelog_content.md
        else
          echo "Initial release" > changelog_content.md
        fi
    
    - name: Create release notes
      run: |
        cat > release_notes.md << 'EOF'
        A fast, robust CSV to JSON converter written in C.
        
        EOF
        
        # Add generated changelog
        cat changelog_content.md >> release_notes.md
        
        cat >> release_notes.md << 'EOF'
        
        ## Download
        
        ### Binaries
        
        **Linux**
        - [cj-linux-amd64](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-linux-amd64) - Linux x86_64
        - [cj-linux-arm64](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-linux-arm64) - Linux ARM64
        
        **macOS**
        - [cj-darwin-amd64](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-darwin-amd64) - macOS Intel
        - [cj-darwin-arm64](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-darwin-arm64) - macOS Apple Silicon
        
        **Windows**
        - [cj-windows-amd64.exe](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-windows-amd64.exe) - Windows x86_64
        - [cj-windows-i386.exe](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-windows-i386.exe) - Windows i386
        - [cj-windows-arm64.exe](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-windows-arm64.exe) - Windows ARM64
        - [cj-windows-native.exe](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-windows-native.exe) - Windows (native build)
        
        ### Source Code
        - [cj-${{ steps.version.outputs.VERSION }}-source.tar.gz](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-${{ steps.version.outputs.VERSION }}-source.tar.gz) - Source archive (tar.gz)
        - [cj-${{ steps.version.outputs.VERSION }}-source.zip](https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-${{ steps.version.outputs.VERSION }}-source.zip) - Source archive (zip)
        
        ## Installation
        
        ### Quick Install (Linux/macOS)
        ```bash
        curl -fsSL https://raw.githubusercontent.com/iqbqioza/cj/main/cli/install.sh | bash
        ```
        
        ### Manual Installation
        
        #### Linux/macOS
        ```bash
        # Download binary for your platform
        wget https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-linux-amd64
        chmod +x cj-linux-amd64
        sudo mv cj-linux-amd64 /usr/local/bin/cj
        
        # Verify installation
        cj version
        ```
        
        #### Windows
        
        **PowerShell (Recommended)**
        ```powershell
        irm https://raw.githubusercontent.com/iqbqioza/cj/main/cli/install.ps1 | iex
        ```
        
        **Manual Installation**
        1. Download the appropriate `.exe` file for your architecture
        2. Place it in a directory in your PATH
        3. Run `cj version` to verify installation
        
        ### Build from Source
        ```bash
        # Download and extract source
        wget https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/cj-${{ steps.version.outputs.VERSION }}-source.tar.gz
        tar -xzf cj-${{ steps.version.outputs.VERSION }}-source.tar.gz
        cd cj-${{ steps.version.outputs.VERSION }}
        
        # Build
        make
        sudo make install
        ```
        
        ## Verification
        
        All binaries include SHA256 checksums. Verify your download:
        
        ```bash
        # Download checksums
        wget https://github.com/iqbqioza/cj/releases/download/${{ steps.version.outputs.VERSION }}/SHA256SUMS
        
        # Verify specific binary
        sha256sum -c SHA256SUMS --ignore-missing
        ```
        
        ## Support
        
        - **Documentation**: [README.md](https://github.com/iqbqioza/cj/blob/main/README.md)
        - **Issues**: [GitHub Issues](https://github.com/iqbqioza/cj/issues)
        - **Contributing**: [CONTRIBUTING.md](https://github.com/iqbqioza/cj/blob/main/CONTRIBUTING.md)
        EOF
    
    - name: Create Release with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get auto-generated release notes from GitHub
        PREV_TAG=${{ steps.changelog.outputs.PREVIOUS_TAG }}
        if [ -n "$PREV_TAG" ]; then
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name='${{ steps.version.outputs.VERSION }}' \
            -f target_commitish='${{ github.sha }}' \
            -f previous_tag_name="$PREV_TAG" \
            --jq '.body' > github_notes.md
        else
          echo "" > github_notes.md
        fi
        
        # Combine custom notes with GitHub generated notes
        cat > final_release_notes.md << 'EOF'
        A fast, robust CSV to JSON converter written in C.
        
        EOF
        
        # Add GitHub auto-generated notes
        if [ -s github_notes.md ]; then
          cat github_notes.md >> final_release_notes.md
          echo "" >> final_release_notes.md
        else
          cat changelog_content.md >> final_release_notes.md
        fi
        
        # Add the rest of our custom content (everything after the header)
        # Skip the first few lines and add the rest
        sed '1,6d' release_notes.md >> final_release_notes.md
        
        # Check if release already exists
        if gh release view ${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
          echo "Release already exists, updating it..."
          # Upload assets to existing release
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              gh release upload ${{ steps.version.outputs.VERSION }} "$file" --clobber || true
            fi
          done
        else
          echo "Creating new release..."
          # Create release with combined notes
          gh release create ${{ steps.version.outputs.VERSION }} \
            --title "${{ steps.version.outputs.VERSION }}" \
            --notes-file final_release_notes.md \
            ${{ contains(steps.version.outputs.VERSION, '-') && '--prerelease' || '' }} \
            release-assets/*
        fi
    
    - name: Create release summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release ${{ steps.version.outputs.VERSION }} created successfully**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Assets Created:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Binaries:**" >> $GITHUB_STEP_SUMMARY
        ls -1 release-assets/cj-* | grep -v '.sha256' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Source Archives:**" >> $GITHUB_STEP_SUMMARY
        ls -1 release-assets/*source* | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Checksums:**" >> $GITHUB_STEP_SUMMARY
        echo "- SHA256SUMS (comprehensive)" >> $GITHUB_STEP_SUMMARY
        ls -1 release-assets/*.sha256 | wc -l | sed 's/^/- /' | sed 's/$/ individual checksum files/' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Release URL:** https://github.com/iqbqioza/cj/releases/tag/${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY